// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users {
  id                    String    @id @default(uuid()) // ユーザーの一意な識別子
  nickname              String // ユーザーのニックネーム
  age                   Int // ユーザーの年齢
  gender                String // ユーザーの性別（例: 男性、女性、その他）
  state                 String // ユーザーの居住州
  plan_type             String // プラン種別（無料 or プレミアム）
  profile_image         String? // プロフィール画像
  notification_settings String? // 通知設定（例: ON/OFF）
  created_at            DateTime  @default(now()) // レコード作成日時
  updated_at            DateTime  @updatedAt // レコード更新日時
  deleted_at            DateTime? // 削除日時（論理削除用）

  posts         post[]
  comments      comment[]
  likes         like[]
  user_tenants  userTenant[]
  notifications notification[]
  commentVote   commentVote[]
}

model tenant {
  id         String   @id @default(uuid()) // テナントの一意な識別子
  name       String // テナント名
  created_at DateTime @default(now()) // レコード作成日時
  updated_at DateTime @updatedAt // レコード更新日時

  userTenants userTenant[]
}

model userTenant {
  id         String   @id @default(uuid()) // 関係の一意な識別子
  user_id    String
  tenant_id  String
  is_default Boolean  @default(false) // ユーザーのデフォルトテナントかどうか
  created_at DateTime @default(now()) // レコード作成日時
  updated_at DateTime @updatedAt // レコード更新日時

  user   users  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tenant tenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
}

model location {
  id         String   @id @default(uuid()) // 場所ID（外部キー）
  name       String // 場所名
  state      String // 所属する州
  lga        String // 所属する地方自治体
  suburb     String // 所属するサバーブ
  created_at DateTime @default(now()) // レコード作成日時
  updated_at DateTime @updatedAt // レコード更新日時

  posts post[]

  @@index([lga]) // LGA（地方自治体）での検索を高速化
  @@index([suburb]) // サバーブでの検索を高速化
  @@index([state, lga, suburb]) // 複数条件検索を高速化
}

enum NotificationTargetType {
  Post
  Comment
}

model notification {
  id          String                 @id @default(uuid()) // 通知ID
  user_id     String // 通知を受け取るユーザー
  type        String // 通知タイプ（例: "comment", "like"）
  content     String // 通知の内容
  target_id   String // 通知の対象（例: 投稿またはコメントID）
  target_type NotificationTargetType // Enum に変更
  is_read     Boolean                @default(false) // 既読フラグ
  created_at  DateTime               @default(now()) // 通知作成日時
  deleted_at  DateTime? // 削除日時（論理削除用）

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum PostType {
  Workplace
  Accommodation
}

model post {
  id          String    @id @default(uuid()) // 投稿ID（一意な識別子）
  user_id     String
  location_id String // 投稿が紐づく場所
  post_type   PostType // Enum に変更
  created_at  DateTime  @default(now()) // レコード作成日時
  updated_at  DateTime  @updatedAt // レコード更新日時
  deleted_at  DateTime? // 削除日時（論理削除用）

  user          users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  location      location       @relation(fields: [location_id], references: [id], onDelete: Cascade)
  workplace     workplace?
  accommodation accommodation?
  comments      comment[]
  likes         like[]
  image         image[]
}

model image {
  id         String    @id @default(uuid()) // 画像ID
  post_id    String // 投稿ID（外部キー）
  url        String // 画像URL
  created_at DateTime  @default(now()) // 作成日時
  deleted_at DateTime? // 削除日時（論理削除用）

  post post @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model workplace {
  post_id    String   @id @unique // 投稿ID（外部キー）
  wage       Float    @default(0) // 時給
  atmosphere String[] // 職場の雰囲気（複数選択可能）
  rating     Int // 推薦レベル（1〜5）
  comment    String? // コメント（職場に関する自由記述）

  post post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@index([wage]) // 検索用インデックス
  @@index([rating]) // 検索用インデックス
  @@index([rating, wage]) // 推薦レベルと時給の組み合わせ検索を高速化
}

model accommodation {
  post_id String   @id @unique // 投稿ID（外部キー）
  rent    Float    @default(0) // 家賃（月額または週額）
  setup   String[] // 部屋の構成（例: シングルルーム、シェアルーム）
  rating  Int // 推薦レベル（1〜5）
  comment String? // コメント（宿泊施設に関する自由記述）

  post post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@index([rent]) // 検索用インデックス
  @@index([rating]) // 検索用インデックス
  @@index([rating, rent]) // 推薦レベルと家賃の組み合わせ検索を高速化
}

model comment {
  id         String    @id @default(uuid()) // コメントID（一意な識別子）
  user_id    String
  post_id    String
  content    String // コメント内容
  created_at DateTime  @default(now()) // レコード作成日時
  updated_at DateTime  @updatedAt // レコード更新日時
  deleted_at DateTime? // 削除日時（論理削除用）
  is_hidden  Boolean   @default(false) // downvote が一定数を超えたら true にする

  user              users               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post              post                @relation(fields: [post_id], references: [id], onDelete: Cascade)
  votes             commentVote[]
  adminNotification adminNotification[]
}

// コメントへの投票（upvote/downvote）を記録
model commentVote {
  id         String   @id @default(uuid())
  user_id    String
  comment_id String
  vote_type  VoteType

  created_at DateTime @default(now())

  user    users   @relation(fields: [user_id], references: [id])
  comment comment @relation(fields: [comment_id], references: [id])

  @@unique([user_id, comment_id]) // 1ユーザーが1コメントに対して1回しか投票できない
}

// 管理者への通知を記録
model adminNotification {
  id          String   @id @default(uuid())
  comment_id  String
  message     String
  notified_at DateTime @default(now())

  comment comment @relation(fields: [comment_id], references: [id])
}

enum VoteType {
  upvote
  downvote
}

model like {
  id         String    @id @default(uuid()) // いいねID（一意な識別子）
  user_id    String
  post_id    String
  created_at DateTime  @default(now()) // レコード作成日時
  deleted_at DateTime? // 削除日時（論理削除用）

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post post  @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id]) // 同じユーザーが同じ投稿に複数いいねできないよう制約を追加
}
