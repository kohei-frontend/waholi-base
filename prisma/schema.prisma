// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ─── ユーザー関連 ─────────────────────────────────────────────
model users {
  id                    String    @id @default(uuid()) // ユーザーの一意な識別子
  nickname              String // ユーザーのニックネーム
  age                   Int // ユーザーの年齢
  gender                String // ユーザーの性別（例: 男性、女性、その他）
  state                 String // ユーザーの居住州
  plan_type             String // プラン種別（無料 or プレミアム）
  profile_image         String? // プロフィール画像
  notification_settings String? // 通知設定（例: ON/OFF）
  created_at            DateTime  @default(now()) // レコード作成日時
  updated_at            DateTime  @updatedAt // レコード更新日時
  deleted_at            DateTime? // 削除日時（論理削除用）

  // ユーザーが投稿したレビュー
  posts posts[]

  // その他共通機能
  comments      comments[]
  likes         likes[]
  user_tenants  userTenant[]
  notifications notifications[]
  commentVote   commentVotes[]
}

model tenant {
  id         String   @id @default(uuid()) // テナントの一意な識別子
  name       String // テナント名
  created_at DateTime @default(now()) // レコード作成日時
  updated_at DateTime @updatedAt // レコード更新日時

  userTenants userTenant[]
}

model userTenant {
  id         String   @id @default(uuid()) // 関係の一意な識別子
  user_id    String
  tenant_id  String
  is_default Boolean  @default(false) // ユーザーのデフォルトテナントかどうか
  created_at DateTime @default(now()) // レコード作成日時
  updated_at DateTime @updatedAt // レコード更新日時

  user   users  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tenant tenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
}

// ─── 地理マスターデータ ─────────────────────────────────────────────
// jsonファイルから抽出したstate, lga, suburb モデルで管理

model state {
  id         String   @id @default(uuid()) // 主キー。各 state の一意な識別子
  name       String // 州の名称（例: "New South Wales"）
  created_at DateTime @default(now()) // 作成日
  updated_at DateTime @updatedAt // 更新日

  lgas     lga[]
  facility facilities[]
}

model lga {
  id         String   @id @default(uuid()) // 主キー。各 LGA の一意な識別子
  state_id   String // 外部キー。所属する state の id
  name       String // LGA の名称
  created_at DateTime @default(now()) // 作成日
  updated_at DateTime @updatedAt // 更新日

  state    state        @relation(fields: [state_id], references: [id], onDelete: Cascade)
  suburbs  suburbs[]
  facility facilities[]
}

model suburbs {
  id         String   @id @default(uuid()) // 主キー。各 suburb の一意な識別子
  lga_id     String // 外部キー。所属する LGA の id
  name       String // suburb の名称
  created_at DateTime @default(now()) // 作成日
  updated_at DateTime @updatedAt // 更新日

  lga      lga          @relation(fields: [lga_id], references: [id], onDelete: Cascade)
  facility facilities[]
}

// ─── 施設関連 ─────────────────────────────────────────────
enum FacilityType {
  WORKPLACE
  ACCOMMODATION
}

model facilities {
  id        String       @id @default(uuid())
  state_id  String
  lga_id    String
  suburb_id String
  type      FacilityType
  name      String

  // 各マスターとのリレーション
  state  state   @relation(fields: [state_id], references: [id], onDelete: Cascade)
  lga    lga     @relation(fields: [lga_id], references: [id], onDelete: Cascade)
  suburb suburbs @relation(fields: [suburb_id], references: [id], onDelete: Cascade)

  posts posts[]

  // @@index([lga]) // LGA（地方自治体）での検索を高速化
  // @@index([suburb]) // サバーブでの検索を高速化
  // @@index([state, lga, suburb]) // 複数条件検索を高速化

  // 同一 state, lga, suburb 内で、同じ施設（name と type の組み合わせ）の重複登録を防止
  @@unique([state_id, lga_id, suburb_id, name, type])
}

// ─── 投稿タイプ ─────────────────────────────────────────────
enum PostType {
  REVIEW
  RECRUITMENT
}

// ─── 共通投稿（レビュー）テーブル ─────────────────────────────────────────────
model posts {
  id          String    @id @default(uuid()) // 投稿ID（一意な識別子）
  user_id     String
  facility_id String
  created_at  DateTime  @default(now()) // レコード作成日時
  updated_at  DateTime  @updatedAt // レコード更新日時
  deleted_at  DateTime? // 削除日時（論理削除用）
  type PostType

  // リレーション：対象施設と投稿者
  facility facilities @relation(fields: [facility_id], references: [id], onDelete: Cascade)
  user     users      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // workplace と accommodation のリレーションを1つだけに制限
  workplace     workplaces?     @relation("WorkplacePost")
  accommodation accommodations? @relation("AccommodationPost")

  comments comments[]
  likes    likes[]
  images   images[]

  @@index([facility_id]) // facilityでの検索を高速化
}

// ─── WORKPLACE 拡張テーブル（施設レビュー詳細：WORKPLACE 用） ─────────────────────────────────────────────
model workplaces {
  post_id    String   @id
  // WORKPLACE 固有のレビュー詳細
  job_category String? // 職種カテゴリー
  wage       Float? // ユーザーが投稿した実際の時給
  atmosphere String[] // ユーザーが投稿した職場の雰囲気
  rating     Int? // 推奨レベル
  comment    String? // 自由記述のレビュー内容

  post posts @relation("WorkplacePost", fields: [post_id], references: [id], onDelete: Cascade)

  @@index([wage]) // 検索用インデックス
  @@index([rating]) // 検索用インデックス
  @@index([job_category]) // 検索用インデックス
  @@index([rating, wage, job_category]) // 組み合わせ検索を高速化
}

// ─── ACCOMMODATION 拡張テーブル（施設レビュー詳細：ACCOMMODATION 用） ─────────────────────────────────────────────
model accommodations {
  post_id String   @id
  // ACCOMMODATION 固有のレビュー詳細
  rent    Float? // ユーザーが投稿した実際の家賃情報
  setup   String[] // ユーザーが投稿した部屋の構成情報
  rating  Int? // 推奨レベル
  comment String? // 自由記述のレビュー内容

  post posts @relation("AccommodationPost", fields: [post_id], references: [id], onDelete: Cascade)

  @@index([rent]) // 検索用インデックス
  @@index([rating]) // 検索用インデックス
  @@index([rent, rating]) // 推薦レベルと時給の組み合わせ検索を高速化
}

// ─── 画像関連 ─────────────────────────────────────────────
model images {
  id         String    @id @default(uuid()) // 画像ID
  post_id    String // 投稿ID（外部キー）
  url        String // 画像URL
  created_at DateTime  @default(now()) // 作成日時
  deleted_at DateTime? // 削除日時（論理削除用）

  post posts @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model comments {
  id         String    @id @default(uuid()) // コメントID（一意な識別子）
  user_id    String
  post_id    String
  content    String // コメント内容
  created_at DateTime  @default(now()) // レコード作成日時
  updated_at DateTime  @updatedAt // レコード更新日時
  deleted_at DateTime? // 削除日時（論理削除用）
  is_hidden  Boolean   @default(false) // downvote が一定数を超えたら true にする

  user              users                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post              posts                @relation(fields: [post_id], references: [id], onDelete: Cascade)
  votes             commentVotes[]
  adminNotification adminNotifications[]
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

// コメントへの投票（UPVOTE/DOWNVOTE）を記録
model commentVotes {
  id         String   @id @default(uuid())
  user_id    String
  comment_id String
  vote_type  VoteType
  created_at DateTime @default(now())

  user    users    @relation(fields: [user_id], references: [id])
  comment comments @relation(fields: [comment_id], references: [id])

  @@unique([user_id, comment_id]) // 1ユーザーが1コメントに対して1回しか投票できない
}

// 管理者への通知を記録
model adminNotifications {
  id          String   @id @default(uuid())
  comment_id  String
  message     String
  notified_at DateTime @default(now())

  comment comments @relation(fields: [comment_id], references: [id])
}

model likes {
  id         String    @id @default(uuid()) // いいねID（一意な識別子）
  user_id    String
  post_id    String
  created_at DateTime  @default(now()) // レコード作成日時
  deleted_at DateTime? // 削除日時（論理削除用）

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post posts @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id]) // 同じユーザーが同じ投稿に複数いいねできないよう制約を追加
}

enum NotificationTargetType {
  POST
  COMMENT
}

model notifications {
  id          String                 @id @default(uuid()) // 通知ID
  user_id     String // 通知を受け取るユーザー
  type        String // 通知タイプ（例: "comment", "like"）
  content     String // 通知の内容
  target_id   String // 通知の対象（例: 投稿またはコメントID）
  target_type NotificationTargetType // Enum に変更
  is_read     Boolean                @default(false) // 既読フラグ
  created_at  DateTime               @default(now()) // 通知作成日時
  deleted_at  DateTime? // 削除日時（論理削除用）

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
